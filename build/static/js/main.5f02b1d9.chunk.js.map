{"version":3,"sources":["MainPage.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","settings","cacheSizeBytes","CACHE_SIZE_UNLIMITED","enablePersistence","then","res","console","log","catch","err","code","db","App","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gTAcAA,gBAXuB,CACtBC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKhBR,cAAqBS,SAAS,CAC7BC,eAAgBV,YAAmBW,uBAGpCX,cAEEY,oBACAC,MAAK,SAAAC,GACLC,QAAQC,IAAI,2BAEZC,OAAM,SAASC,IACE,wBAAbA,EAAIC,MAEgB,kBAAbD,EAAIC,OADdJ,QAAQC,IAAIE,MAMf,IAAME,EAAKpB,cCfIqB,GDiBuBC,Y,+KC/BpBA,cCOZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTjB,MAAK,SAAAsB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1B1B,QAAQC,IACN,iHAKEe,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBpB,QAAQC,IAAI,sCAGRe,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BlB,OAAM,SAAA2B,GACL7B,QAAQ6B,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBzB,OAAOC,SAASyB,MACpDC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,GAAN,sBAEP3B,IAgEV,SAAiCO,EAAOC,GAEtCuB,MAAMxB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5B1C,MAAK,SAAA2C,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAMhD,MAAK,SAAAsB,GACjCA,EAAa2B,aAAajD,MAAK,WAC7BY,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bd,OAAM,WACLF,QAAQC,IACN,oEAvFAgD,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAMhD,MAAK,WACjCE,QAAQC,IACN,iHAMJa,EAAgBC,EAAOC,OCtC/BE,K","file":"static/js/main.5f02b1d9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n\tapiKey: \"AIzaSyCnB6bVU3l1o6NSim96hYMqVYQXT8p-1ek\",\r\n\tauthDomain: \"stet-d84bf.firebaseapp.com\",\r\n\tdatabaseURL: \"https://stet-d84bf.firebaseio.com\",\r\n\tprojectId: \"stet-d84bf\",\r\n\tstorageBucket: \"stet-d84bf.appspot.com\",\r\n\tmessagingSenderId: \"851022538939\",\r\n\tappId: \"1:851022538939:web:6314530885f6b6dadb619e\",\r\n\tmeasurementId: \"G-9SNP6LVLN7\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nfirebase.firestore().settings({\r\n\tcacheSizeBytes: firebase.firestore.CACHE_SIZE_UNLIMITED\r\n});\r\n\r\nfirebase\r\n\t.firestore()\r\n\t.enablePersistence()\r\n\t.then(res => {\r\n\t\tconsole.log(\"offline Mode Enabale\");\r\n\t})\r\n\t.catch(function(err) {\r\n\t\tif (err.code === \"failed-precondition\") {\r\n\t\t\tconsole.log(err);\r\n\t\t} else if (err.code === \"unimplemented\") {\r\n\t\t\tconsole.log(err);\r\n\t\t}\r\n\t});\r\n\r\nconst db = firebase.firestore();\r\n\r\nexport default class MainPage extends Component {\r\n\tstate = {\r\n\t\tformData: \"\",\r\n\t\tflag: false,\r\n\t\toffline: false,\r\n\t\tonline: true,\r\n\t\tfirebaseData: []\r\n\t};\r\n\r\n\tconnectionCheck = () => {\r\n\t\tvar that = this;\r\n\t\tconsole.log(\"here\");\r\n\t\twindow.addEventListener(\r\n\t\t\t\"online\",\r\n\t\t\tfunction(e) {\r\n\t\t\t\tconsole.log(\"online\");\r\n\t\t\t\tthat.setState({ online: true, offline: false });\r\n\t\t\t},\r\n\t\t\tfalse\r\n\t\t);\r\n\r\n\t\twindow.addEventListener(\r\n\t\t\t\"offline\",\r\n\t\t\tfunction(e) {\r\n\t\t\t\tconsole.log(\"offline\");\r\n\t\t\t\tthat.setState({ offline: true, online: false });\r\n\t\t\t},\r\n\t\t\tfalse\r\n\t\t);\r\n\t};\r\n\r\n\tsendDatatoFirebase = () => {\r\n\t\tconsole.log(this.state.formData);\r\n\t\tvar that = this;\r\n\t\tif (this.state.online) {\r\n\t\t\tfirebase\r\n\t\t\t\t.firestore()\r\n\t\t\t\t.enableNetwork()\r\n\t\t\t\t.then(function() {\r\n\t\t\t\t\t// Do online actions\r\n\t\t\t\t\tvar dataTest = db.collection(\"formData\").doc();\r\n\r\n\t\t\t\t\tdataTest.set({\r\n\t\t\t\t\t\tname: that.state.formData\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tfirebase\r\n\t\t\t\t.firestore()\r\n\t\t\t\t.disableNetwork()\r\n\t\t\t\t.then(function() {\r\n\t\t\t\t\t// Do offline actions\r\n\t\t\t\t\tvar dataTest = db.collection(\"formData\").doc();\r\n\t\t\t\t\tconsole.log(that.state.formData);\r\n\t\t\t\t\tdataTest.set({\r\n\t\t\t\t\t\tname: that.state.formData\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.connectionCheck();\r\n\t\tvar that = this;\r\n\t\tdb.collection(\"formData\").onSnapshot(\r\n\t\t\t{ includeMetadataChanges: true },\r\n\t\t\tfunction(snapshot) {\r\n\t\t\t\tsnapshot.docChanges().forEach(function(change) {\r\n\t\t\t\t\tif (change.type === \"added\") {\r\n\t\t\t\t\t\tthat.state.firebaseData.push(change.doc.data());\r\n\t\t\t\t\t\tconsole.log(\"New city: \", change.doc.data());\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar source = snapshot.metadata.fromCache\r\n\t\t\t\t\t\t? \"local cache\"\r\n\t\t\t\t\t\t: \"server\";\r\n\t\t\t\t\tconsole.log(\"Data came from \" + source);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log(this.state);\r\n\r\n\t\tif (this.state.firebaseData.length > 0) {\r\n\t\t\tconsole.log(\"here\");\r\n\t\t\tvar tableDataFirebase = this.state.firebaseData.map(\r\n\t\t\t\t(elem, index) => (\r\n\t\t\t\t\t<tr key={index}>\r\n\t\t\t\t\t\t<th scope=\"row\">{index}</th>\r\n\t\t\t\t\t\t<td>{elem.data}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// this.connectionCheck();\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"jumbotron text-center\">\r\n\t\t\t\t\t<h1>FireBase DataStore</h1>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tonChange={e => {\r\n\t\t\t\t\t\t\t\tthis.setState({ formData: e.target.value });\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tvalue={this.state.formData}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\r\n\t\t\t\t\t\t\tonClick={this.sendDatatoFirebase}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tAdd Data to FireBase\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<table className=\"table\">\r\n\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">ID</th>\r\n\t\t\t\t\t\t\t\t\t<th scope=\"col\">Data</th>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t<th scope=\"row\">1</th>\r\n\t\t\t\t\t\t\t\t\t<td>Mark</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t{tableDataFirebase}\r\n\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from \"react\";\r\n// import { BrowserRouter, Route, Link } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport MainPage from \"./MainPage.js\";\r\n\r\nclass App extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t// <BrowserRouter>\r\n\t\t\t// \t<div>\r\n\t\t\t// \t\t<Route exact path=\"/\" component={MainPage} />\r\n\t\t\t// \t\t{/* <Route path=\"/completed\" component={CompletedTasks} /> */}\r\n\t\t\t// \t</div>\r\n\t\t\t// </BrowserRouter>\r\n\t\t\t<MainPage />\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\nserviceWorker.register();\r\n"],"sourceRoot":""}